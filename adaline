# ADALINE FOR AND GATE 

import numpy as np

def fit_adaline(X,y,learning_rate=0.01,epochs=100):

    #initializing random weights and bias
    weights=np.zeros(X.shape[1])
    bias=0.0

    for _ in range(epochs):
        for x_i,target in zip(X,y):

            input=np.dot(x_i,weights) + bias
            output=input #linear activation            

            error=target-output

            #weights updating
            weights+=learning_rate * error * x_i
            bias+=learning_rate * error

    return weights,bias

def predict(X,weights,bias):
    output=np.dot(X,weights)+bias
    return np.where(output >=0.0,1,-1)

if __name__=="__main__":
    
    X=np.array([[0,0],
                [0,1],
                [1,0],
                [1,1]])
    y=np.array([[-1],[-1],[-1],[1]])

    weights,bias=fit_adaline(X,y)
    predictions=predict(X,weights,bias)

    print(f"weights is :{weights}")
    print(f"bias is : {bias}")
    print(f"predictions are \n {predictions}")
    


###Madaline####
import numpy as np

def fit_madeline(X, y, learning_rate=0.01, epochs=50):
    # Initialize weights and bias
    weights = np.zeros(X.shape[1])
    bias = 0.0

    for _ in range(epochs):
        for xi, target in zip(X, y):
            net_input = np.dot(xi, weights) + bias
            output = np.where(net_input >= 0.0, 1, -1)
            error = target - output
            if error != 0:
                weights += learning_rate * error * xi
                bias += learning_rate * error

    return weights, bias

def predict(X, weights, bias):
    output = np.dot(X, weights) + bias
    return np.where(output >= 0.0, 1, -1)

# Example usage
if __name__ == "__main__":
    # Example dataset (AND logic gate)
    X = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
    y = np.array([-1, -1, -1, 1])

    # Train Madeline model
    learning_rate = 0.01
    epochs = 20
    weights, bias = fit_madeline(X, y, learning_rate, epochs)

    # Predictions
    predictions = predict(X, weights, bias)
    print("Predictions:", predictions)
    print("Weights:", weights)
    print("Bias:", bias)



