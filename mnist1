import tensorflow as tf
from tensorflow.keras import datasets, layers, models
import matplotlib.pyplot as plt
import numpy as np

# Load and preprocess the MNIST dataset
(X_train, y_train), (X_test, y_test) = datasets.mnist.load_data()
X_train, X_test = X_train / 255.0, X_test / 255.0

# Define the CNN model
model = models.Sequential([
    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Flatten(),
    layers.Dense(50, activation='relu'),
    layers.Dense(10, activation='softmax')
])

# Compile and train the model
model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
model.fit(X_train.reshape(-1, 28, 28, 1), y_train, epochs=10)

# Predict on the test dataset
y_pred = model.predict(X_test.reshape(-1, 28, 28, 1))
y_classes = np.argmax(y_pred, axis=1)

# Display a random sample from the test dataset along with its predicted label
random_index = np.random.randint(len(X_test))
plt.figure(figsize=(15, 2))
plt.imshow(X_test[random_index], cmap='gray')
plt.xlabel(f"Predicted: {y_classes[random_index]}, Actual: {y_test[random_index]}")
plt.show()
